package thread.juc.monitor;

/**
 * 监视器monitor：无需程序员考虑如何加锁的情况下，保证多线程的安全性
 * 监视器特性：
 *   a. 监视器时只包含私有域的类
 *   b. 每个监视器类的对象有一个相关的锁
 *   c. 使用该锁对所有的方法进行加锁
 *      -> 调用obj.method()时：
 *           1. obj对象锁在方法调用时自动获得
 *           2. 方法返回时释放该锁
 *           3. 因为所有域都是私有，该线程操作时没有其他线程能访问该域
 *   d. 该锁可以有任意多个相关条件
 *      -> 每一个条件变量管理一个独立的线程集
 *
 *  synchronized关键字：表现得像一个监视器
 */
public class MonitorLock {
}
