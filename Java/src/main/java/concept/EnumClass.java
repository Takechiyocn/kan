package concept;

import lombok.extern.slf4j.Slf4j;

import java.util.Scanner;

/**
 * @description:所有的枚举类型都继承自Enum
 * @author: Kan
 * @date: 2021/2/23 22:44
 */
@Slf4j
public class EnumClass {
    public static void main(String[] args) {
        // toString: 获取枚举常量名
        log.info("Generated by toString:" + Size.SMALL.toString());

        // valueOf：获取/生成枚举类型常量
        // Size.class先转换成Enum，再从Enum转换成Size
        Size enumType = Enum.valueOf(Size.class, "LARGE");
        log.info("Generated by valueOf:" + enumType.toString());
        // 所有的枚举类型继承自enum
        Size enumTypeBySize = Size.valueOf("EXTRA_BIG");


        // values：返回包含所有枚举值的数组
        // s：枚举类型变量
        Size[] sizes = Size.values();
        for (Size s : sizes) {
            log.info("Generated by values(list):" + s.toString() + ", abbrevivation:" + s.getAbbreviation());
        }

        // ordinal：枚举常量在enum声明中的位置，从0开始
        log.info("Generated by ordinal:" + Size.MEDIUM.ordinal());

        // compareTo：果枚举常量出现在other之前，则返回一个负值；
        //            如果this==other，则返回0；否则，返回正值。
        //            枚举常量的出现次序在enum声明中给出。
        Size[] sizeArray = new Size[] {Size.MEDIUM, Size.LARGE};
        log.info("Generated by compareTo:" + sizeArray[0].compareTo(sizeArray[1]));

        // Scanner
        Scanner in = new Scanner(System.in);
        log.warn("Enter a size:(SMALL,MEDIUM,LARGE,EXTRA_LARGE)");
        String input = in.next().toUpperCase();
        Size size = Enum.valueOf(Size.class, input);
        log.info("Chosen:" + size.toString()+",abbreviation:" + size.getAbbreviation());
    }

    /**
     * 枚举类型实际上定义一个类，枚举常量为实例
     */
    public enum Size {
        // small
        SMALL("S"),
        MEDIUM("M"),
        LARGE("L"),
        EXTRA_BIG("XL");

        private String abbreviation;

        /**
         * 构造函数：SMALL等均为Size枚举类型
         * @param abbreviation
         */
        private Size(String abbreviation) {
            this.abbreviation = abbreviation;
        }

        public String getAbbreviation() {
            return this.abbreviation;
        }
    }
}
